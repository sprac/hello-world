#include <Timemini.h>
#include "Arduino.h"


const int nX = 67; const int nZ = 50;//nX=50
const int nY = 50;        //nY=64//int nY=16;

//                          1 2  3  4  5  6  7  8
//                  0 1 2 3 4 5  6  7  8  9 10 11 12 13 14 15
const int rnP[] = { 2,3,4,5,8,9,10,11,12,13,14,15,16,17 }; int rnPN = sizeof rnP / sizeof rnP[0];
const int snP[] = { 6,7,18,19 }; int snPN = sizeof snP / sizeof snP[0];// select1,2

const int enP = rnP[4];

const int xlP = rnP[6];
const int heP = rnP[7];
const int eoP = rnP[8];
const int etP = rnP[9];
const int acP = rnP[11];
const int wtP = rnP[12];
const int dwP = rnP[13];

const int sP1 = snP[2]; const int sP2 = snP[3];

//int poI[]={  0,  1,   2,  3,  4,  5,   6,   7,  8,  9, 10, 11, 12,  13,  14,  15, 16, 17, 18, 19, 20,  21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35};
int poI[] = {  6,  7,   8,  9, 10, 12, 13, 14,  15,  24, 25, 26, 27, 28, 29,  16,  17,  18, 19, 20, 21, 22, 23,  30, 31, 32, 33, 34, 35 };
int poA[] = { xlP,xlP, etP,xlP,xlP,etP,etP,etP, heP, wtP,wtP,wtP,wtP,wtP,wtP, etP, eoP, etP,etP,etP };
int poB[] = { etP,etP, dwP,etP,etP,dwP,dwP,dwP, dwP, dwP,dwP,dwP,dwP,dwP,dwP, dwP, etP, dwP,dwP,dwP };
int poV[] = { 140,140, 100,140,140,100, 90, 50, 100, 100,100,100,100,100,  0,  70, 100,  90, 90,100 };
//ong poT[]={ m10,m05, m10,m10,m05,m05,m03,m02, m15, m05,m05,m05,m05,m05,m02, m05, m02, m01,m01,m05};

int poN = sizeof poV / sizeof poV[0];
int xPo[] = { 0, 18, 36, 54, 72, 90 };
int yPo[] = { 0, 36, 85,121,170,206 };//72+13, 108+13,144+26,180+26
int zPo[] = { 50,20 };
long xxx = sc25;
long vTm = 150;
long tmS, tmN;
long nowPx = 0, nowPy = 0, nowPz = 0;
int xMotor = 1; int yMotor = 0; int zMotor = 2;

void setup() {
	for (int x = 0; x<rnPN; x++) { pinMode(rnP[x], OUTPUT); digitalWrite(rnP[x], LOW); }
	for (int x = 0; x<snPN; x++) { pinMode(snP[x], INPUT); }// digitalWrite(sP1,HIGH);digitalWrite(sP2,HIGH);
	digitalWrite(enP, HIGH);
	moveZero();
	delay(1000);//for(I=0;I<36;I++){moveX(poI[I]);delay(1000);}

	for (int I = 0; I<poN; I++) { if (poV[I]<0)continue; moveX(poI[I]); tmS = millis(); tmN = tmS + xxx; while (millis()<tmN)runTw(I, tmS); }

}
void loop() { delay(1000); }

void runTw(int i, long tmst) {
	int voly = 100 - poV[i];  if (voly<0)voly = 0;
	long xtm = poV[i] * vTm; long ytm = voly*vTm;
	if (millis() - tmst<xtm) { digitalWrite(poA[i], HIGH); }
	else { digitalWrite(poA[i], LOW); }
	if (millis() - tmst<ytm) { digitalWrite(poB[i], HIGH); }
	else { digitalWrite(poB[i], LOW); }
}

void moveX(int x) { int xx = x % 6; int yy = x / 6; moveXY(xPo[xx], yPo[yy]); }

void moveXY(int x, int y) {
	long xDis = x*nX; long yDis = y*nY;
	//moveZa();
	long distanceX = xDis - nowPx;
	digitalWrite(enP, LOW);
	if (distanceX >= 0) { digitalWrite(rnP[xMotor * 2], LOW); }
	else { digitalWrite(rnP[xMotor * 2], HIGH); distanceX = -distanceX; }
	runDis(rnP[xMotor * 2 + 1], distanceX);
	nowPx = xDis;

	long distanceY = yDis - nowPy;
	if (distanceY >= 0) { digitalWrite(rnP[yMotor * 2], LOW); }
	else { digitalWrite(rnP[yMotor * 2], HIGH); distanceY = -distanceY; }
	runDis(rnP[yMotor * 2 + 1], distanceY);
	nowPy = yDis;
	//moveZ(zPosition[0]);
	digitalWrite(enP, HIGH);
}

void moveZero() {
	delay(1000);
	//moveZa();
	moveA(xMotor);
	moveA(yMotor);
	nowPx = 0;
	nowPy = 0;
}

void moveA(int x) {
	digitalWrite(rnP[x * 2], HIGH);  //dir
	digitalWrite(enP, LOW);
	while (digitalRead(snP[x]) == LOW) { run(rnP[x * 2 + 1]); }
	nowPx = 0;
	digitalWrite(enP, HIGH);
}


void runDis(int x, long distance) {
	while (distance>0) { run(x); distance--; }
}
void run(int x) {
	digitalWrite(x, HIGH);
	delayMicroseconds(100);
	digitalWrite(x, LOW);
	delayMicroseconds(1000);
}

void wt() { delay(1000); }


/*;
010203040506070809101112121415161718192021222324252627282930
010203040506070809101112121415161718192021222324252627282930
010203040506070809101112121415161718192021222324252627282930
010203040506070809101112121415161718192021222324252627282930
010203040506070809101112121415161718192021222324252627282930
010203040506070809101112121415161718192021222324252627282930
010203040506070809101112121415161718192021222324252627282930
010203040506070809101112121415161718192021222324252627282930
010203040506070809101112121415161718192021222324252627282930
010203040506070809101112121415161718192021222324252627282930
010203040506070809101112121415161718192021222324252627282930
010203040506070809101112121415161718192021222324252627282930
010203040506070809101112121415161718192021222324252627282930

*/






